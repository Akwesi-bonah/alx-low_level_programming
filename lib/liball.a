!<arch>
0-isupper.c/    0           0     0     644     215       `
#include "main.h"
/**
 * _isupper - check if a char is uppre case letter
 * @c: character to check
 *
 * Return: 1 if character is upper case letter else 0
 */

int _isupper(int c)
{
	return (c >= 65 && c <= 90);
}

0-memset.c/     0           0     0     644     275       `
#include "main.h"
/**
 * _memset - copy files by constant
 * @s: variable to store
 * @b: variable to be copyed
 * @n: constant
 *
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     350       `
# include "main.h"
/**
 * _strcat - join two string together
 * @src: source to append
 * @dest: source to add
 *
 * Return: The result
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}


	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     438       `
# include "main.h"
/**
 * _atoi - convert string to integers
 * @s: string to be converted
 *
 * Return: int converted form string
 */

int _atoi(char *s)
{
	int sign = 1, i = 0;
	unsigned int res = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
		if (s[i] == '-')
			sign *= -1;
		i++;
	}
	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
	{
		res = (res * 10) + (s[i] - '0');
		i++;
	}
	res *= sign;
	return (res);
}
1-isdigit.c/    0           0     0     644     497       `
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
/**
 * main - Entry
 * Description: find the last digits
 *
 * Return: 0 (Success)
 */
int main(void)
{
	int n;
	int x;

	srand(time(0));
	n = rand() - RAND_MAX / 2;
	/* your code goes there */

	x = n % 10;

	printf("Last digit of %d is %d ", n, x);

	if (x > 5)
	{
		printf("and is greater than 5\n");
	}

	if (x == 0)
	{
		printf("and is 0\n");
	}

	if (x < 6 && x != 0)
	{
		printf("and is less than 6 and not 0\n");
	}

	return (0);
}

1-memcpy.c/     0           0     0     644     302       `
# include "main.h"
/**
 * _memcpy - copy from one location to another
 * @dest: destination
 * @src: source
 * @n: number of byte
 *
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     380       `
#include "main.h"

/**
 * _strncat - concatenates string
 * @dest: destination string
 * @src: source string
 * @n: number of bytes
 *
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}

	while (src[j] != '\0' && j < n)
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';

	return (dest);
}
2-strchr.c/     0           0     0     644     329       `
# include "main.h"
# include <stdio.h>
/**
 * _strchr - locate string character
 * @s: string to search from
 * @c: charcter to find
 *
 * Return: c if found else NUll
 */

char *_strchr(char *s, char c)
{
	int x;

	while (1)
	{
		x = *s++;
		if (x == c)
		{
			return (s - 1);
		}

		if (x == 0)
		{
			return (NULL);
		}

	}
}

2-strlen.c/     0           0     0     644     214       `
# include "main.h"
/**
 * _strlen - return lent of a string
 * @s: string to check
 *
 * Return: the lenght of the string
 */

int _strlen(char *s)
{
	int a = 0;

	while (s[a] != '\0')
	{
		a++;
	}

	return (a);
}
2-strncpy.c/    0           0     0     644     323       `
# include "main.h"
/**
 * _strncpy - copies string
 * @dest: destination
 * @src: source
 * @n: byte
 *
 * Return : dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;

	while (i < n && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     240       `
# include "main.h"
/**
 * _islower - Chect is a charater is a lower case.
 *@c: character
 * Return: 1 if the characte is lowercase else 0
 */

int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     196       `
# include "main.h"
/**
 * _puts - print a character
 * @str: pointer to print
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     328       `
# include "main.h"
/**
 * _strcmp - compare two string
 * @s1: string to be compared
 * @s2: string to be compared
 *
 * Return: -1 if s1 > s2 else 0 if s1 == s2 and 1 if s2 > s1
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 == *s2)
	{
		if (*s1 == '\0')
		{
			return (0);
		}

		s1++;
		s2++;

	}

	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     437       `
# include "main.h"
/**
 * _strspn - get lenght of sub string
 * @s: string to check
 * @accept: string list
 *
 * Return: s if accepted else 0
 */



unsigned int _strspn(char *s, char *accept)
{
	int i, j, f, flag;

	f = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		flag = 0;
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				f++;
				flag = 1;
			}
		}
		if (flag == 0)
		{
			return (f);
		}
	}

	return (0);
}

4-isalpha.c/    0           0     0     644     280       `
# include "main.h"
/**
 * _isalpha - check for alphabetic charater
 * @c: the character to check
 * Return: 1 if character is lower or upper case else 0
 */

int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     386       `
#include "main.h"
#include <stdio.h>
/**
 * *_strpbrk - searches for a string
 * @s: string to search
 * @accept: string to look form
 *
 * Return: s if accept esle NULL
 */


char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; *s != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}
		}
		s++;
	}

	return (NULL);
}
5-strstr.c/     0           0     0     644     459       `
# include "main.h"
# include <stdio.h>
/**
 * _strstr - find substring
 * @haystack: string to search from
 * @needle: string to look
 *
 * Return: haystack if found else NULL
 */

char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
			{
				break;
			}
		}
		if (!needle[j])
		{
			return (&haystack[i]);
		}
	}

	return (NULL);
}

6-abs.c/        0           0     0     644     195       `
# include "main.h"
/**
 * _abs - check if a number is positive
 *@n: number to check
 * Return: the absolute value of int
 */

int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}

	return (-n);
}

9-strcpy.c/     0           0     0     644     475       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

